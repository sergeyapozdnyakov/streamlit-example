import streamlit as st
from deap import algorithms, base, creator, tools
import random
import pandas as pd
import numpy as np


st.set_page_config(page_title="–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–æ–≤ –∫–∞–ª–ª–∏–≥—Ä–∞—Ñ–æ–≤", 
                   page_icon="üßä",
                    layout="wide",
                    initial_sidebar_state="expanded",
                    )

@st.cache_data
def convert_df(df):
    # IMPORTANT: Cache the conversion to prevent computation on every rerun
    return df.to_csv().encode('utf-8')


calligraphers = [{'name': '', 'productivity': 0, 'work_hours': 0}]
calligraphers_sample = [{'name': '–ù–æ–≤–∏–∫–æ–≤–∞ –ù–∞—Ç–∞–ª—å—è –ì–µ–Ω–Ω–∞–¥—å–µ–≤–Ω–∞ –ö–∞–ª–ª–∏–≥—Ä–∞—Ñ', 'productivity': 3000, 'work_hours': 40},
{'name': '–ú–∞—Ä–∏—è –ù–µ–ª—é–±–∏–Ω–∞ ( –ö—Ä–∞—Ö–º–∞–ª–µ–≤–∞ –û–ª—å–≥–∞)', 'productivity': 3960, 'work_hours': 35},
{'name': '–•—É—Å–∏—è–Ω–æ–≤–∞ –î–∏–Ω–∞—Ä–∞', 'productivity': 3000, 'work_hours': 0},
{'name': '–ö–∞—Ä–∞–±–∞–Ω–æ–≤–∞ –ü–æ–ª–∏–Ω–∞ –ê–Ω–∞—Ç–æ–ª—å–µ–≤–Ω–∞', 'productivity': 1992, 'work_hours': 20},
{'name': '–õ—é–¥–º–∏–ª–∞ –ú–æ—Ä–æ–∑–æ–≤–∞', 'productivity': 3996, 'work_hours': 52},
{'name': '–°—Ç—Ä–µ–ª–æ–≤–∞ –ï–ª–µ–Ω–∞ –ö–∞–ª–ª–∏–≥—Ä–∞—Ñ', 'productivity': 3996, 'work_hours': 30},
{'name': '–ù–∞–º –†–æ–∑–∞ –ë–æ—Ä–∏—Å–æ–≤–Ω–∞', 'productivity': 3000, 'work_hours': 40},
{'name': '–ù–∞–≥–∞–π –°–≤–µ—Ç–ª–∞–Ω–∞ –í–∏—Ç–∞–ª—å–µ–≤–Ω–∞', 'productivity': 12000, 'work_hours': 55},
{'name': '–†—É–¥–µ–Ω–∫–æ –õ–∏—è –ö–æ–Ω—Å—Ç–∞–Ω—Ç–∏–Ω–æ–≤–Ω–∞', 'productivity': 4800, 'work_hours': 0},
{'name': '–ö—É–∑–Ω–µ—Ü–æ–≤–∞ –ê–Ω–∞—Å—Ç–∞—Å–∏—è –î–º–∏—Ç—Ä–∏–µ–≤–Ω–∞', 'productivity': 3000, 'work_hours': 15},
{'name': '–Æ–≥–∞–π –¢–∞—Ç—å—è–Ω–∞ –ê–ª–µ–∫—Å–∞–Ω–¥—Ä–æ–≤–Ω–∞', 'productivity': 3996, 'work_hours': 0},
{'name': '–ö—É–∑–∞–≤–∫–æ–≤–∞ –û–ª—å–≥–∞ –ú–∏—Ö–∞–π–ª–æ–≤–Ω–∞', 'productivity': 3000, 'work_hours': 35},
{'name': '–ö—É–∑–Ω–µ—Ü–æ–≤–∞ –î–∞—Ä—å—è –î–º–∏—Ç—Ä–∏–µ–≤–Ω–∞', 'productivity': 3996, 'work_hours': 40},
{'name': '–ú–µ—â–µ—Ä—è–∫–æ–≤–∞ –û–ª—å–≥–∞ –ò–≤–∞–Ω–æ–≤–Ω–∞', 'productivity': 6000, 'work_hours': 54},
{'name': '–ü–ª–µ—Ö–∞–Ω–æ–≤–∞ –õ—é–¥–º–∏–ª–∞ –ò–≤–∞–Ω–æ–≤–Ω–∞', 'productivity': 3000, 'work_hours': 35},
{'name': '–ë–∞—Ä–∞–Ω–æ–≤–∞ –ù–∞—Ç–∞–ª—å—è –í–ª–∞–¥–∏–º–∏—Ä–æ–≤–Ω–∞', 'productivity': 0, 'work_hours': 0},
{'name': '–¢–∞—Ç—å—è–Ω–∞ –¢—é—Ö–∏–Ω–∞', 'productivity': 6000, 'work_hours': 20},
{'name': '–¢–∞—Ç—å—è–Ω–∞ –ë–∞–ª–∞–±–∞–Ω–æ–≤–∞', 'productivity': 1800, 'work_hours': 20},
{'name': '–û–ª—å–≥–∞ –°–æ–º–∏–Ω–∞', 'productivity': 1800, 'work_hours': 40},
{'name': '–ï–ª–µ–Ω–∞ –°—É–≤–æ—Ä–æ–≤–∞', 'productivity': 3000, 'work_hours': 30},
{'name': '–û–ª—å–≥–∞ –î–∞–≤–∏–¥—è–Ω', 'productivity': 4500, 'work_hours': 55},
{'name': '–°–≤–µ—Ç–∞ –ü–∞–Ω–∏–Ω–∞', 'productivity': 3000, 'work_hours': 30},
{'name': '–ë–∞—Ä–∞–Ω–æ–≤–∞ –û–∫—Å–∞–Ω–∞ –í–∏–∫—Ç–æ—Ä–æ–≤–Ω–∞', 'productivity': 3000, 'work_hours': 30},
{'name': '–Æ–≥–∞–π –ñ–∞–Ω–Ω–∞ –°–µ—Ä–≥–µ–µ–≤–Ω–∞', 'productivity': 0, 'work_hours': 0},
{'name': '–õ—É—Ü –ê–Ω–Ω–∞ –ï–≤–≥–µ–Ω—å–µ–≤–Ω–∞', 'productivity': 3000, 'work_hours': 35},
{'name': '–ê–ª–µ–∫—Å–∞–Ω–¥—Ä–æ–≤–∞ –ê–ª—å–±–∏–Ω–∞ –í–ª–∞–¥–∏–º–∏—Ä–æ–≤–Ω–∞', 'productivity': 756, 'work_hours': 35},
{'name': '–ú–µ—â–µ—Ä—è–∫–æ–≤–∞ –û–ª–µ—Å—è –ê–Ω–¥—Ä–µ–µ–≤–Ω–∞', 'productivity': 3000, 'work_hours': 15},
{'name': '–¢–æ—â–µ–Ω–∫–æ –ê–Ω–Ω–∞ –ê–ª–µ–∫—Å–∞–Ω–¥—Ä–æ–≤–Ω–∞', 'productivity': 3600, 'work_hours': 42},
{'name': '–õ–∏—Å–∏—á–∫–∏–Ω–∞ –í–∏–∫—Ç–æ—Ä–∏—è –ì–µ–Ω–Ω–∞–¥—å–µ–≤–Ω–∞', 'productivity': 2400, 'work_hours': 24},
{'name': '–ü–æ–ª–µ–≤–∞ –ò—Ä–∏–Ω–∫–∞', 'productivity': 3600, 'work_hours': 21},
{'name': '–õ–∏–º –í–µ—Ä–∞ –í–ª–∞–¥–∏–º–∏—Ä–æ–≤–Ω–∞', 'productivity': 1440, 'work_hours': 10},
{'name': '–ò–ø–∞—Ç–æ–≤–∞ –Æ–ª–∏—è –í–∏—Ç–∞–ª—å–µ–≤–Ω–∞', 'productivity': 2400, 'work_hours': 15},
{'name': '–ü–æ–ª—è–Ω–∏—á–µ–≤–∞ –°–≤–µ—Ç–ª–∞–Ω–∞ –ê–ª–µ–∫—Å–∞–Ω–¥—Ä–æ–≤–Ω–∞', 'productivity': 2400, 'work_hours': 15},
{'name': '–î–µ–º—å—è–Ω–æ–≤–∞ –ù–∞—Ç–∞–ª—å—è –ê–Ω–∞—Ç–æ–ª—å–µ–≤–Ω–∞ ', 'productivity': 1992, 'work_hours': 0}]

orders = [{'aroma': '', 'length': 0, 'bobbin_quantity': 0, 'quantity': 0}]
orders_sample = [{'aroma': '–õ–° –°—Ç–µ–∫–ª–æ / –î—É—Ö–∏ –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ Rose, Jasmine, Narcissus (50–º–ª)', 'length': 22, 'bobbin_quantity': 500, 'quantity': 3000},
{'aroma': '–õ–° –°—Ç–µ–∫–ª–æ / –î—É—Ö–∏ –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ Tobacco, Vetiver & Amber (50–º–ª)', 'length': 21, 'bobbin_quantity': 500, 'quantity': 3000},
{'aroma': '–õ–° –°—Ç–µ–∫–ª–æ / –î—É—Ö–∏ –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ Vetiver, Neroli, Orange (50–º–ª)', 'length': 21, 'bobbin_quantity': 500, 'quantity': 3000},
{'aroma': '–õ–° –¢—É–±—É—Å / –î–∏—Ñ—Ñ—É–∑–æ—Ä. –°—Ä–µ–¥—Å—Ç–≤–æ –¥–ª—è –∞—Ä–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ Cedarwood & Sandalwood & Amber, Patchouli (85–º–ª)', 'length': 36, 'bobbin_quantity': 500, 'quantity': 1000},
{'aroma': '–õ–° –¢—É–±—É—Å / –î–∏—Ñ—Ñ—É–∑–æ—Ä. –°—Ä–µ–¥—Å—Ç–≤–æ –¥–ª—è –∞—Ä–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ –ø–æ–º–µ—â–µ–Ω–∏–π Fiction (85–º–ª)', 'length': 7, 'bobbin_quantity': 500, 'quantity': 3500},
{'aroma': '–õ–° –¢—É–±—É—Å / –î–∏—Ñ—Ñ—É–∑–æ—Ä. –°—Ä–µ–¥—Å—Ç–≤–æ –¥–ª—è –∞—Ä–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ –ø–æ–º–µ—â–µ–Ω–∏–π Lemongrass & Vetiver, Amber (212,5–º–ª)', 'length': 24, 'bobbin_quantity': 500, 'quantity': 1000},
{'aroma': '–õ–° –¢—É–±—É—Å / –î–∏—Ñ—Ñ—É–∑–æ—Ä. –°—Ä–µ–¥—Å—Ç–≤–æ –¥–ª—è –∞—Ä–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ –ø–æ–º–µ—â–µ–Ω–∏–π Orange & Jasmine, Vanilla (212,5–º–ª)', 'length': 22, 'bobbin_quantity': 500, 'quantity': 2000},
{'aroma': '–õ–° –¢—É–±—É—Å / –î–∏—Ñ—Ñ—É–∑–æ—Ä. –°—Ä–µ–¥—Å—Ç–≤–æ –¥–ª—è –∞—Ä–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ –ø–æ–º–µ—â–µ–Ω–∏–π Rosemary & Lemon, Neroli (85–º–ª)', 'length': 21, 'bobbin_quantity': 500, 'quantity': 2000},
{'aroma': '–õ–° –¢—É–±—É—Å / –î–∏—Ñ—Ñ—É–∑–æ—Ä. –°—Ä–µ–¥—Å—Ç–≤–æ –¥–ª—è –∞—Ä–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ –ø–æ–º–µ—â–µ–Ω–∏–π Vanilla Blend (85–º–ª)', 'length': 12, 'bobbin_quantity': 500, 'quantity': 1000},
{'aroma': '–õ–° –¢—É–±—É—Å / –î—É—Ö–∏ –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ Apple, Lotus (50–º–ª)', 'length': 11, 'bobbin_quantity': 500, 'quantity': 5000},
{'aroma': '–õ–° –¢—É–±—É—Å / –î—É—Ö–∏ –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ Grapefruit & Rose, Patchouli (50–º–ª)', 'length': 25, 'bobbin_quantity': 500, 'quantity': 3000},
{'aroma': '–õ–° –¢—É–±—É—Å / –î—É—Ö–∏ –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ Neroli, Patchouli, Honey, Amber (50–º–ª)', 'length': 28, 'bobbin_quantity': 500, 'quantity': 500},
{'aroma': '–õ–° –¢—É–±—É—Å / –î—É—Ö–∏ –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ Powder (50–º–ª)', 'length': 6, 'bobbin_quantity': 500, 'quantity': 500},
{'aroma': '–õ–° –¢—É–±—É—Å / –î—É—Ö–∏ –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ Tobacco, Vetiver & Amber (50–º–ª)', 'length': 21, 'bobbin_quantity': 500, 'quantity': 3000},
{'aroma': '–õ–° –¢—É–±—É—Å / –î—É—Ö–∏ –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ Vetiver, Neroli, Orange (50–º–ª)', 'length': 21, 'bobbin_quantity': 500, 'quantity': 3000},
{'aroma': '–õ–° / –ñ–∏–¥–∫–æ–µ –º—ã–ª–æ Ylang-Ylang & Vetiver, Musk (300–º–ª)', 'length': 24, 'bobbin_quantity': 500, 'quantity': 5000},
{'aroma': '–õ–° / –ö—Ä–µ–º —É–≤–ª–∞–∂–Ω—è—é—â–∏–π –¥–ª—è –≤—å—é—â–∏—Ö—Å—è –≤–æ–ª–æ—Å Black Pepper, Vetiver, Neroli, Amber  (200–º–ª)', 'length': 32, 'bobbin_quantity': 500, 'quantity': 3000},
{'aroma': '–õ–° / –ú–∞—Å–ª–æ –¥–ª—è —Ç–µ–ª–∞ Pink Pepper, Elemi, Cinnamon, Leather (100–º–ª)', 'length': 33, 'bobbin_quantity': 500, 'quantity': 5000},
{'aroma': '–õ–° / –°—ã–≤–æ—Ä–æ—Ç–∫–∞ –¥–ª—è –≤–æ–ª–æ—Å Black Pepper, Vetiver, Neroli, Amber  (50–º–ª)', 'length': 32, 'bobbin_quantity': 500, 'quantity': 5000},
{'aroma': '–õ–° –¢—É–±—É—Å / –î—É—Ö–∏ –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ Pink Pepper, Elemi, Cinnamon, Leather (50–º–ª)', 'length': 33, 'bobbin_quantity': 500, 'quantity': 10000},
{'aroma': '–õ–° –¢—É–±—É—Å / –î—É—Ö–∏ –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ Black Vanilla (50–º–ª)', 'length': 12, 'bobbin_quantity': 500, 'quantity': 5000},
{'aroma': '–õ–° –°—Ç–µ–∫–ª–æ / –î—É—Ö–∏ –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ Pink Pepper, Elemi, Cinnamon, Leather (50–º–ª)', 'length': 33, 'bobbin_quantity': 500, 'quantity': 10000}]


def load_sample_data():
    if sample_data:
        calligraphers = [{'name': '', 'productivity': 0, 'work_hours': 0}]
        orders = [{'aroma': '', 'length': 0, 'bobbin_quantity': 0, 'quantity': 0}]
    else:
        calligraphers = calligraphers_sample.copy()
        orders = orders_sample.copy()
    st.session_state.calligraphers = calligraphers
    st.session_state.edited_calligraphers = st.session_state.calligraphers.copy()
    st.session_state.orders = orders
    st.session_state.edited_orders = st.session_state.orders.copy()


with st.sidebar:
    calculation_type = st.radio(
    "–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä –∑–∞–ø—É—Å–∫–∞",
    ["–†–∞–∑–±–∏—Ç—å –∑–∞–∫–∞–∑—ã –Ω–∞ –±–æ–±–∏–Ω—ã", "–†–∞—Å–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∑–∞–∫–∞–∑—ã —Ü–µ–ª–∏–∫–æ–º"],
    )
    sample_data = st.toggle('–ü—Ä–∏–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö', 
                            on_change = load_sample_data)
    compute_length = st.select_slider(
    '–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ—á–Ω–æ—Å—Ç—å —Ä–∞—Å—á—ë—Ç–∞. –ß–µ–º –≤—ã—à–µ —Ç–æ—á–Ω–æ—Å—Ç—å, —Ç–µ–º –¥–ª–∏–Ω–Ω–µ–µ –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã –∞–ª–≥–æ—Ä–∏—Ç–º–º–∞',
    options=['–≥–ª–∞–∑–æ–º –Ω–µ –º–æ—Ä–≥–Ω—É—Ç—å', '–ø–æ—Å–º–æ—Ç—Ä—é –∫–∞–∫ –∫—Ä—É—Ç–∏—Ç—Å—è –∫—Ä—É–∂–æ—á–µ–∫ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞', '–ø–æ–π–¥—É –ø–æ–∫—É—Ä—é... –∏ –∫–æ—Ñ–µ –ø–æ–ø—å—é', '–∞ –Ω–µ–∑–∞–º–∞—Ö–Ω—É—Ç—å—Å—è –ª–∏ –Ω–∞ –≤—Å—é –ú–∞—Ç—Ä–∏—Ü—É'])


st.title("–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–æ–≤ –∫–∞–ª–ª–∏–≥—Ä–∞—Ñ–æ–≤")

# Initialize session state with dataframes
# Include initialization of "edited" slots by copying originals
if 'calligraphers' not in st.session_state:
    st.session_state.calligraphers = calligraphers
    st.session_state.edited_calligraphers = st.session_state.calligraphers.copy()
    st.session_state.orders = orders
    st.session_state.edited_orders = st.session_state.orders.copy()


# –°–æ–∑–¥–∞–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∫–∞–ª–ª–∏–≥—Ä–∞—Ñ–æ–≤
st.header("–°–ø–∏—Å–æ–∫ –∫–∞–ª–ª–∏–≥—Ä–∞—Ñ–æ–≤")
st.session_state.edited_calligraphers = st.data_editor(st.session_state.calligraphers, num_rows='dynamic', column_config={
        "name": st.column_config.TextColumn(label="–§–ò–û –∫–∞–ª–ª–∏–≥—Ä–∞—Ñ–∞", width=400), 
        "productivity": st.column_config.NumberColumn(label="–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∫–∞–ª–ª–∏–≥—Ä–∞—Ñ–∞ –≤ —Å–∏–º–≤–æ–ª–∞—Ö –≤ —á–∞—Å", min_value=1),
        "work_hours": st.column_config.NumberColumn(label="–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã –∫–∞–ª–ª–∏–≥—Ä–∞—Ñ–∞ –≤ –Ω–µ–¥–µ–ª—é –≤ —á–∞—Å–∞—Ö", min_value=1)
    })

# –°–æ–∑–¥–∞–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∑–∞–∫–∞–∑–æ–≤
st.header("–°–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤")
st.session_state.edited_orders = st.data_editor(st.session_state.orders, num_rows='dynamic',  column_config={
        "aroma": st.column_config.TextColumn(label="–ù–∞–∑–≤–∞–Ω–∏–µ –º–∞—Ä–∫–∏—Ä–æ–≤–∫–∏", width=1000), 
        "length": st.column_config.NumberColumn(label="–î–ª–∏–Ω–∞ —Å–∏–º–≤–æ–ª–æ–≤ –∞—Ä–æ–º–∞—Ç–∞ –≤ –º–∞—Ä–∫–∏—Ä–æ–≤–∫–µ", min_value=1),
        "bobbin_quantity": st.column_config.NumberColumn(label="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∞—Ä–∫–∏—Ä–æ–≤–æ–∫ –≤ –±–æ–±–∏–Ω–µ", min_value=1),
        "quantity": st.column_config.NumberColumn(label="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∞—Ä–∫–∏—Ä–æ–≤–æ–∫ –≤ –∑–∞–∫–∞–∑–µ", min_value=1),
    })

# Save edits by copying edited dataframes to "original" slots in session state
def save_edits():
    st.session_state.calligraphers = st.session_state.edited_calligraphers.copy()
    st.session_state.orders = st.session_state.edited_orders.copy()

def split_orders(orders):
    split_orders = []
    for order in orders:
        n_bobbins = int(order['quantity'] // order['bobbin_quantity'])
        for _ in range(n_bobbins):
            split_order = order.copy()
            split_order['quantity'] = order['bobbin_quantity']
            split_orders.append(split_order)
    return split_orders

def fitness(chromosome, calligraphers, orders):
    times = [0] * len(calligraphers)
    for i in range(len(chromosome)):
        calligrapher_index = chromosome[i]
        calligrapher = calligraphers[calligrapher_index]
        order = orders[i]
        time = round((order['length'] * order['quantity']) / calligrapher['productivity'], 1)
        times[calligrapher_index] += time
    max_time = max(times)
    
    penalty = 0
    mean_time = np.mean(times)
    for time in times:
        penalty += abs(time - mean_time)
    
    unique_calligraphers = len(set(chromosome))
    penalty += penalty * (2 ** (len(calligraphers) - unique_calligraphers))
    
    return max_time + penalty,

def genetic_algorithm(calligraphers, orders, population_size=200, max_generations=1000):
    
    creator.create("FitnessMin", base.Fitness, weights=(-1.0,))
    creator.create("Individual", list, fitness=creator.FitnessMin)
    
    toolbox = base.Toolbox()
    
    toolbox.register("indices", random.choices, range(len(calligraphers)), k=len(orders))
    toolbox.register("individual", tools.initIterate, creator.Individual, toolbox.indices)
    toolbox.register("population", tools.initRepeat, list, toolbox.individual)
    
    toolbox.register("evaluate", fitness, calligraphers=calligraphers, orders=orders)
    
    toolbox.register("mate", tools.cxTwoPoint)
    toolbox.register("mutate", tools.mutShuffleIndexes, indpb=0.05)
    
    toolbox.register("select", tools.selTournament, tournsize=3)
    
    population = toolbox.population(n=population_size)
    
    hof = tools.HallOfFame(1)
    
    stats = tools.Statistics(lambda ind: ind.fitness.values)
    stats.register("avg", np.mean)
    stats.register("std", np.std)
    stats.register("min", np.min)
    stats.register("max", np.max)
    
    population, logbook = algorithms.eaSimple(population, toolbox, cxpb=0.5, mutpb=0.2, ngen=max_generations,
                        stats=stats, halloffame=hof)

    best_chromosome = hof[0]
   
    return best_chromosome

def format_report_time_by_calligrapher(best_chromosome, calligraphers):

    data = []
    order_counts = {}
    calligrapher_times = {}
    calligrapher_work_hours = {}
    for i in range(len(best_chromosome)):
        calligrapher_index = best_chromosome[i]
        calligrapher_name = calligraphers[calligrapher_index]['name']
        calligrapher_work_hours[calligrapher_name] = calligraphers[calligrapher_index]['work_hours']
        order_name = orders[i]['aroma']
        if order_name not in order_counts:
            order_counts[order_name] = {}
        if calligrapher_name not in order_counts[order_name]:
            order_counts[order_name][calligrapher_name] = 0
        order_counts[order_name][calligrapher_name] += orders[i]['quantity']
        
        if calligrapher_name not in calligrapher_times:
            calligrapher_times[calligrapher_name] = 0
        time = round((orders[i]['length'] * orders[i]['quantity']) / calligraphers[calligrapher_index]['productivity'], 1)
        calligrapher_times[calligrapher_name] += time
            
    total_time = 0
    for calligrapher_name in calligrapher_times:
        time = calligrapher_times[calligrapher_name]
        total_time += time
        weeks = round(time / calligrapher_work_hours[calligrapher_name], 1)
        data.append([calligrapher_name, time, calligrapher_work_hours[calligrapher_name], weeks])

    return data


def format_report_orders_by_calligrapher(best_chromosome, calligraphers):

    data = []

    times = [0] * len(calligraphers)

    for i in range(len(best_chromosome)):
            calligrapher_index = best_chromosome[i]
            calligrapher = calligraphers[calligrapher_index]
            order = orders[i]
            time = round((order['length'] * order['quantity']) / calligrapher['productivity'], 1)
            times[calligrapher_index] += time

    for i, calligrapher in enumerate(calligraphers):
        calligrapher_orders = [orders[j] for j in range(len(best_chromosome)) if best_chromosome[j] == i]
        aroma_totals = {}
        for order in calligrapher_orders:
            if order['aroma'] not in aroma_totals:
                aroma_totals[order['aroma']] = 0
            aroma_totals[order['aroma']] += order['quantity']
        for aroma, total in aroma_totals.items():
            weeks = round(times[i] / calligrapher['work_hours'], 1)
            data.append([calligrapher['name'], aroma, total, calligrapher['productivity'], calligrapher['work_hours'], times[i], weeks])

    return data


# def format_report_calligraphers_by_order(best_chromosome, calligraphers):
#     # –í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
#     order_counts = {}
#     calligrapher_times = {}
#     for i in range(len(best_chromosome)):
#         calligrapher_index = best_chromosome[i]
#         calligrapher_name = calligraphers[calligrapher_index]['name']
#         order_name = orders[i]['aroma']
#         if order_name not in order_counts:
#             order_counts[order_name] = {}
#         if calligrapher_name not in order_counts[order_name]:
#             order_counts[order_name][calligrapher_name] = 0
#         order_counts[order_name][calligrapher_name] += orders[i]['quantity']
        
#         if calligrapher_name not in calligrapher_times:
#             calligrapher_times[calligrapher_name] = 0
#         time = (orders[i]['length'] * orders[i]['quantity']) / calligraphers[calligrapher_index]['productivity']
#         calligrapher_times[calligrapher_name] += time

#     for order_name in order_counts:
#         print(f"Order: {order_name}")
#         for calligrapher_name in order_counts[order_name]:
#             quantity = order_counts[order_name][calligrapher_name]
#             print(f"Calligrapher {calligrapher_name} assigned {quantity} labels")
            
#     print("\nTotal time by calligrapher:")
#     total_time = 0
#     for calligrapher_name in calligrapher_times:
#         time = calligrapher_times[calligrapher_name]
#         total_time += time
#         print(f"Calligrapher {calligrapher_name} total time: {time:.1f} hours") 
#     print(f"Total time: {total_time:.2f} hours")

#     times = [0] * len(calligraphers)

#     for i in range(len(best_chromosome)):
#             calligrapher_index = best_chromosome[i]
#             calligrapher = calligraphers[calligrapher_index]
#             order = orders[i]
#             time = (order['length'] * order['quantity']) / calligrapher['productivity']
#             times[calligrapher_index] += time

#     for i, calligrapher in enumerate(calligraphers):
#         print(f"{calligrapher['name']}: {times[i]:.2f} hours")
#         calligrapher_orders = [orders[j] for j in range(len(best_chromosome)) if best_chromosome[j] == i]
#         aroma_totals = {}
#         for order in calligrapher_orders:
#             if order['aroma'] not in aroma_totals:
#                 aroma_totals[order['aroma']] = 0
#             aroma_totals[order['aroma']] += order['quantity']
#         for aroma, total in aroma_totals.items():
#             print(f"\t{aroma}: {total} units")
    
# –ó–∞–ø—É—Å–∫ —Ä–∞—Å—á–µ—Ç–∞ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–æ–≤ –ø–æ –∫–∞–ª–ª–∏–≥—Ä–∞—Ñ–∞–º
if st.button('–ó–∞–ø—É—Å—Ç–∏—Ç—å —Ä–∞—Å—á–µ—Ç'):
    
    save_edits()
    
    valid_calligraphers = [c for c in st.session_state.calligraphers if c['productivity'] > 0 and c['work_hours'] > 0] 
    
    if calculation_type == "–†–∞–∑–±–∏—Ç—å –∑–∞–∫–∞–∑—ã –Ω–∞ –±–æ–±–∏–Ω—ã":
        orders = split_orders(st.session_state.orders) 
    else:
        orders = st.session_state.orders
    
    match compute_length:
        case '–≥–ª–∞–∑–æ–º –Ω–µ –º–æ—Ä–≥–Ω—É—Ç—å':
            gen = 100
            population = 10
        case '–ø–æ—Å–º–æ—Ç—Ä—é –∫–∞–∫ –∫—Ä—É—Ç–∏—Ç—Å—è –∫—Ä—É–∂–æ—á–µ–∫ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞':
            gen = 1000
            population = 200
        case '–ø–æ–π–¥—É –ø–æ–∫—É—Ä—é... –∏ –∫–æ—Ñ–µ –ø–æ–ø—å—é':
            gen = 10000
            population = 500
        case '–∞ –Ω–µ–∑–∞–º–∞—Ö–Ω—É—Ç—å—Å—è –ª–∏ –Ω–∞ –≤—Å—é –ú–∞—Ç—Ä–∏—Ü—É':
            gen = 50000
            population = 1000
        case _:
            gen = 1000
            population = 200
    with st.spinner('–†–∞—Å—á–µ—Ç —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–æ–≤ –ø–æ –∫–∞–ª–ª–∏–≥—Ä–∞—Ñ–∞–º...'):
        best_chromosome = genetic_algorithm(valid_calligraphers, orders, population_size=population, max_generations = gen)

        st.success('–†–∞—Å—á–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω!')

        # –í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ä–∞—Å—á–µ—Ç–∞

        data = format_report_time_by_calligrapher(best_chromosome, valid_calligraphers)
        result = pd.DataFrame(data,
                              columns=['name', 'time', 'work_hours', 'weeks'])

        st.header("–°—É–º–º–∞—Ä–Ω–æ–µ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–∫–∞–∑–æ–≤")
        st.dataframe(result, column_config={
                "name": st.column_config.TextColumn("–§–ò–û –∫–∞–ª–ª–∏–≥—Ä–∞—Ñ–∞", width=400), 
                "time": st.column_config.NumberColumn("–í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–∫–∞–∑–æ–≤, —á–∞—Å—ã", format="%.1f"),
                "work_hours": st.column_config.NumberColumn("–†–∞–±–æ—á–∏—Ö —á–∞—Å–æ–≤ –≤ –Ω–µ–¥–µ–ª—é", format="%d"),
                "weeks": st.column_config.NumberColumn("–ù–µ–¥–µ–ª—å", format="%.1f")
            })
        st.header("–°—É–º–º–∞—Ä–Ω–æ–µ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–∫–∞–∑–æ–≤ –≤ —á–∞—Å–∞—Ö")
        st.bar_chart(result,
            x='name',
            y='time'
        )

        st.header("–°—É–º–º–∞—Ä–Ω–æ–µ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–∫–∞–∑–æ–≤ –≤ –Ω–µ–¥–µ–ª—è—Ö")
        st.bar_chart(result,
            x='name',
            y='weeks'
        )

        data = format_report_orders_by_calligrapher(best_chromosome, valid_calligraphers)
        result = pd.DataFrame(data,
                              columns=['name', 'aroma', 'quantity', 'productivity', 'work_hours', 'time', 'weeks'])
        st.header("–°–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤ –ø–æ –∫–∞–ª–ª–∏–≥—Ä–∞—Ñ–∞–º")
        st.dataframe(result, column_config={
                "name": st.column_config.TextColumn("–§–ò–û –∫–∞–ª–ª–∏–≥—Ä–∞—Ñ–∞", width=400), 
                "aroma": st.column_config.TextColumn("–ù–∞–∑–≤–∞–Ω–∏–µ –º–∞—Ä–∫–∏—Ä–æ–≤–∫–∏", width=1000),
                "quantity": st.column_config.NumberColumn("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∞—Ä–∫–∏—Ä–æ–≤–æ–∫", format="%d"),
                "productivity": st.column_config.NumberColumn("–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å, —Å–∏–º–≤–æ–ª–æ–≤/—á–∞—Å", format="%d"),
                "work_hours": st.column_config.NumberColumn("–†–∞–±–æ—á–∏—Ö —á–∞—Å–æ–≤ –≤ –Ω–µ–¥–µ–ª—é", format="%d"),
                "time": st.column_config.NumberColumn("–í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞, —á–∞—Å—ã", format="%.1f"),
                "weeks": st.column_config.NumberColumn("–í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞, –Ω–µ–¥–µ–ª–∏", format="%.1f")
            })

        csv = result.to_csv(sep=';', decimal=',').encode('utf-8-sig')

        st.download_button(
            label="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ CSV",
            data=csv,
            file_name='–∫–∞–ª–ª–∏–≥—Ä–∞—Ñ—ã_–∑–∞–∫–∞–∑—ã.csv',
            mime='text/csv',
        )
